/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memcpy.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodufour <jodufour@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/12 21:14:39 by jodufour          #+#    #+#             */
/*   Updated: 2024/02/12 22:54:24 by jodufour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lib.h"
#include <cstring>

struct Parameters
{
	u8 *const dst;
	u8 const *const src;
	usize const n;
};

typedef void *return_type;

struct Test
{
	Parameters const parameters;
	usize const dst_size;
};

static constexpr Test TESTS[] = {
	{{(u8[]){},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8[]){
		  0x8D},
	  (u8 const[]){},
	  0},
	 1},
	{{(u8[]){
		  0xC2},
	  (u8 const[]){
		  0x1A},
	  0},
	 1},
	{{(u8[]){
		  0x88},
	  (u8 const[]){
		  0xA0},
	  1},
	 1},
	{{(u8[]){
		  0xC4, 0x14},
	  (u8 const[]){
		  0x0B, 0xFC},
	  2},
	 2},
	{{(u8[]){
		  0x89, 0xD6, 0xA4},
	  (u8 const[]){
		  0xCB, 0x36, 0xB0},
	  3},
	 3},
	{{(u8[]){
		  0x8A, 0x3A, 0x3A, 0x0A},
	  (u8 const[]){
		  0x3D, 0x3E, 0x3F, 0x40},
	  4},
	 4},
	{{(u8[]){
		  0x6D, 0xB8, 0xC0, 0x18, 0x87},
	  (u8 const[]){
		  0x83, 0x04, 0x67, 0x22, 0x42},
	  5},
	 5},
	{{(u8[]){
		  0x21, 0xDF, 0x8F, 0x5D, 0x36, 0x9A},
	  (u8 const[]){
		  0x92, 0x9A, 0x1D, 0x2E, 0x25, 0xEE},
	  6},
	 6},
	{{(u8[]){
		  0x60, 0x59, 0xC8, 0x46, 0xD6, 0xDA, 0x30},
	  (u8 const[]){
		  0x36, 0x6C, 0xBD, 0xF7, 0xD0, 0xDF, 0xEF},
	  7},
	 7},
	{{(u8[]){
		  0xF7, 0x15, 0x74, 0xD2, 0x5E, 0xEE, 0x78, 0x64, 0xE7, 0x18, 0x14, 0x53, 0x09, 0xD0, 0x5F, 0x83, 0x13, 0x91,
		  0x15, 0xF7, 0x6C, 0x93, 0x20, 0x14},
	  (u8 const[]){
		  0xF8, 0x9F, 0xE3, 0x87, 0x8A, 0x50, 0x1C, 0xBB, 0xDB, 0xB5, 0x76, 0x55, 0xA1, 0x1F, 0x50, 0xD4, 0xD1, 0xE0,
		  0x4A, 0x2A, 0xDF, 0x9B, 0x5A, 0x97},
	  24},
	 24},
	{{(u8[]){
		  0x54, 0x44, 0xF0, 0x30, 0x3B, 0x2F, 0x4D, 0xEC, 0x16, 0x59, 0xFC, 0x56, 0x0E, 0xD1, 0xBD, 0x04, 0x19, 0x4D,
		  0x1A, 0xFE, 0xE2, 0x4F, 0x3E, 0x24, 0x94},
	  (u8 const[]){
		  0x17, 0x5C, 0x4F, 0x2C, 0xD9, 0xBC, 0x3D, 0x32, 0x9B, 0xFC, 0x0D, 0x13, 0x5D, 0x3B, 0x1C, 0x38, 0x6C, 0xF9,
		  0x78, 0x6D, 0xB5, 0xC1, 0xA5, 0x85, 0x60},
	  25},
	 25},
	{{(u8[]){
		  0xFA, 0x54, 0x72, 0x4C, 0x7A, 0x89, 0xDE, 0xCF, 0x77, 0xFB, 0x90, 0xFB, 0x19, 0x5F, 0x67, 0xED, 0x72, 0xA3,
		  0xA9, 0x92, 0xCE, 0x31, 0x04, 0x35, 0xDB, 0xEF},
	  (u8 const[]){
		  0xCE, 0xC3, 0xE8, 0xFB, 0xCF, 0x5C, 0x35, 0x58, 0x7E, 0xDE, 0xC4, 0x08, 0xD7, 0x47, 0x66, 0x25, 0x61, 0xBA,
		  0x8B, 0xD2, 0x87, 0x67, 0x04, 0xA7, 0x9F, 0x12},
	  26},
	 26},
	{{(u8[]){
		  0xC8, 0x26, 0xC5, 0xF5, 0xEA, 0x51, 0x26, 0xA1, 0xD9, 0x8E, 0x18, 0x03, 0xAC, 0x7B, 0xA5, 0x84, 0x67, 0x24,
		  0x8E, 0x5E, 0xFF, 0xCC, 0x3B, 0xBF, 0x5E, 0xC9, 0x83},
	  (u8 const[]){
		  0x53, 0x56, 0x11, 0x65, 0x91, 0x8A, 0x75, 0xC0, 0x11, 0xA8, 0xD6, 0x5D, 0xEE, 0xA2, 0x3D, 0x7A, 0xCC, 0x44,
		  0x1B, 0x95, 0x15, 0x47, 0x67, 0x0C, 0x2D, 0x5C, 0x8D},
	  27},
	 27},
	{{(u8[]){
		  0xBB, 0x8F, 0x95, 0x75, 0xD3, 0xA5, 0x53, 0xCD, 0x7C, 0xD7, 0x0E, 0x95, 0xDA, 0x2C, 0xD0, 0x0B, 0x14, 0x94,
		  0xE2, 0xD6, 0x91, 0x01, 0x0E, 0xFD, 0x8E, 0x89, 0x81, 0x62},
	  (u8 const[]){
		  0x6B, 0xFB, 0x70, 0x8A, 0x65, 0xD1, 0x1F, 0xA1, 0xD1, 0x2E, 0xD8, 0x7A, 0x70, 0x43, 0x8E, 0x0F, 0x45, 0xBD,
		  0x2E, 0x46, 0x11, 0x53, 0xC6, 0x3D, 0x32, 0xD2, 0x87, 0xDA},
	  28},
	 28},
	{{(u8[]){
		  0x63, 0x24, 0x43, 0x00, 0xE9, 0x15, 0xC6, 0x83, 0x63, 0x19, 0x17, 0x25, 0x35, 0x14, 0xBF, 0x5C, 0xE0, 0x51,
		  0x65, 0xC0, 0x03, 0x16, 0x78, 0xC9, 0xD2, 0x26, 0xE0, 0x41, 0x90},
	  (u8 const[]){
		  0x0D, 0x71, 0x68, 0x53, 0xB2, 0x27, 0xF6, 0x5F, 0x47, 0xE3, 0x06, 0xDC, 0x13, 0xE5, 0x79, 0xBD, 0x39, 0x74,
		  0x43, 0x3E, 0xCE, 0x3B, 0xA9, 0x9A, 0xDE, 0xE5, 0xB2, 0xCD, 0x96},
	  29},
	 29},
	{{(u8[]){
		  0x26, 0xFE, 0xFD, 0x4F, 0x22, 0x1B, 0x8C, 0x82, 0x21, 0x1C, 0x77, 0xAC, 0x8D, 0x03, 0xB6, 0xFF, 0x13, 0x1C,
		  0x8A, 0xDC, 0x07, 0xF4, 0xC7, 0x7D, 0xCA, 0xCF, 0x72, 0x40, 0xDC, 0x36},
	  (u8 const[]){
		  0xA6, 0xD0, 0x5F, 0x47, 0x1A, 0x6E, 0xF8, 0xBE, 0x48, 0x85, 0xEE, 0xA9, 0xC3, 0x87, 0x5E, 0x48, 0x0D, 0x48,
		  0x99, 0x4C, 0x7F, 0x32, 0x55, 0x7A, 0xD6, 0xAF, 0x5F, 0x93, 0xD5, 0x7E},
	  30},
	 30},
	{{(u8[]){
		  0xD8, 0xE4, 0x37, 0x68, 0xB7, 0x44, 0x34, 0xBD, 0x78, 0x9C, 0xA0, 0xE4, 0x32, 0xD1, 0x9F, 0x89, 0x0E, 0xF3,
		  0x1D, 0x29, 0x23, 0xFA, 0x8E, 0x07, 0x3C, 0x12, 0x7E, 0xB1, 0x0C, 0x33, 0x77},
	  (u8 const[]){
		  0xFF, 0x36, 0x7A, 0xEC, 0x7F, 0x18, 0x91, 0x8D, 0xB6, 0x37, 0xAE, 0xB6, 0xAF, 0x6F, 0x40, 0xEE, 0x7F, 0xB0,
		  0xC7, 0xC6, 0x34, 0x82, 0xFD, 0x0B, 0x80, 0xBD, 0x1B, 0x34, 0x9D, 0x7F, 0xAB},
	  31},
	 31},
	{{(u8[]){
		  0xC9, 0x81, 0xDE, 0x57, 0x1F, 0x18, 0xB8, 0xCF, 0x80, 0xD0, 0x9D, 0x9F, 0x45, 0xAB, 0xA2, 0x2A, 0x99, 0xA4,
		  0x3E, 0x66, 0xA7, 0xD9, 0xA0, 0x5E, 0x80, 0xBE, 0x32, 0xF2, 0x52, 0x60, 0x34, 0x8D, 0x73, 0x69, 0xA8, 0x2B,
		  0x0A, 0x3A, 0x46, 0xE3, 0x26, 0xAA},
	  (u8 const[]){
		  0xA9, 0x8B, 0x9F, 0x1C, 0xFA, 0x12, 0x65, 0x25, 0x5D, 0xBF, 0xD1, 0x64, 0x77, 0x31, 0x03, 0x93, 0x03, 0x40,
		  0x0E, 0x48, 0xC6},
	  21},
	 42},
};
static constexpr usize TESTS_LEN = sizeof(TESTS) / sizeof(*TESTS);

/**
 * @brief Tests the lib::memCpy function.
 *
 * @return true if the test was passed successfully, false otherwise.
 */
bool testMemCpy(void)
{
	for (usize i = 0; i < TESTS_LEN; ++i)
	{
		Parameters const &p = TESTS[i].parameters;
		usize const end_size = TESTS[i].dst_size - p.n;
		u8 const *const end = p.dst + end_size;
		u8 const *const end_dup = reinterpret_cast<u8 const *>(memcpy(new u8[end_size], end, end_size));
		return_type const ret = lib::memCpy(p.dst, p.src, p.n);
		bool const failed = ret != p.dst || memcmp(ret, p.src, p.n) || memcmp(end, end_dup, end_size);

		delete[] end_dup;
		if (failed)
			return false;
	}
	return true;
}
