/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memcmp.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodufour <jodufour@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/12 11:00:02 by jodufour          #+#    #+#             */
/*   Updated: 2024/02/15 02:08:06 by jodufour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lib.h"
#include <cstring>

struct Parameters
{
	u8 const *const s0;
	u8 const *const s1;
	usize const n;
};

typedef i32 return_type;

struct Test
{
	Parameters const parameters;
	return_type const expected;
};

static constexpr Test TESTS[] = {
	{{(u8 const[]){},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8 const[]){0xDC, 0x6A, 0x0F},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8 const[]){0x9C, 0xC3, 0xA7},
	  (u8 const[]){0xFE, 0xE3, 0x59},
	  0},
	 0},
	{{(u8 const[]){0x13},
	  (u8 const[]){0x13},
	  1},
	 0},
	{{(u8 const[]){0xB5},
	  (u8 const[]){0x11},
	  1},
	 1},
	{{(u8 const[]){0x8F, 0x76},
	  (u8 const[]){0x8F, 0x76},
	  2},
	 0},
	{{(u8 const[]){0xC3, 0xAC},
	  (u8 const[]){0xC3, 0x0A},
	  2},
	 1},
	{{(u8 const[]){0x80, 0x26},
	  (u8 const[]){0x2B, 0x93},
	  2},
	 1},
	{{(u8 const[]){0x8B, 0x86, 0x47},
	  (u8 const[]){0x8B, 0x86, 0x47},
	  3},
	 0},
	{{(u8 const[]){0xBD, 0xCD, 0xFF},
	  (u8 const[]){0xBD, 0xCD, 0x7E},
	  3},
	 1},
	{{(u8 const[]){0x8B, 0x86, 0x47},
	  (u8 const[]){0x8B, 0x0C, 0xFD},
	  3},
	 1},
	{{(u8 const[]){0xD1, 0x79, 0xC3},
	  (u8 const[]){0x19, 0x9C, 0xE3},
	  3},
	 1},
	{{(u8 const[]){0xA1, 0x3C, 0xE4, 0xD5},
	  (u8 const[]){0xA1, 0x3C, 0xE4, 0xD5},
	  4},
	 0},
	{{(u8 const[]){0x8D, 0x46, 0x51, 0xEB},
	  (u8 const[]){0x8D, 0x46, 0x51, 0xCF},
	  4},
	 1},
	{{(u8 const[]){0x00, 0x13, 0xEC, 0xAF},
	  (u8 const[]){0x00, 0x13, 0x38, 0xE3},
	  4},
	 1},
	{{(u8 const[]){0xA8, 0xD1, 0x02, 0xB6},
	  (u8 const[]){0xA8, 0xBF, 0x8E, 0xB6},
	  4},
	 1},
	{{(u8 const[]){0xCF, 0x2C, 0xD6, 0x5C},
	  (u8 const[]){0xC1, 0xE1, 0xD6, 0x5C},
	  4},
	 1},
	{{(u8 const[]){0x90, 0x15, 0x15, 0xDB, 0x30, 0xEA, 0x18, 0xCE, 0x63, 0xE5, 0xC7, 0x03, 0xF4},
	  (u8 const[]){0x90, 0x15, 0x15, 0xDB, 0x30, 0xEA, 0x18, 0xCE, 0x63, 0xE5, 0xC7, 0x03, 0xF4},
	  13},
	 0},
	{{(u8 const[]){0xE9, 0x3B, 0xD6, 0xAB, 0xF5, 0xA8, 0x77, 0x62, 0x16, 0x7F, 0xE9, 0xB6, 0x1F, 0x5C, 0xE5},
	  (u8 const[]){0xE9, 0x3B, 0xD6, 0xAB, 0xF5, 0xA8, 0x77, 0x62, 0x16, 0x7F, 0xE9, 0xB6, 0x1F, 0x5C, 0x61},
	  15},
	 1},
	{{(u8 const[]){0xBB, 0x03, 0xAA, 0xBE, 0xF1, 0xDE, 0xFA, 0xF5, 0xA3, 0x1D, 0xE9, 0x7A, 0xA8, 0x4E, 0x29},
	  (u8 const[]){0xBB, 0x03, 0xAA, 0xBE, 0xF1, 0xDE, 0xFA, 0xF5, 0xA3, 0x1D, 0xE9, 0x7A, 0xA8, 0x28, 0xBE},
	  15},
	 1},
	{{(u8 const[]){0xF0, 0x26, 0x4C, 0x78, 0xDE, 0xA8, 0xA3, 0x56, 0x02, 0xBB, 0xEF, 0xBE, 0x90, 0x10, 0x71},
	  (u8 const[]){0xF0, 0x26, 0x4C, 0x78, 0xDE, 0xA8, 0xA3, 0x56, 0x02, 0xBB, 0xEF, 0xBE, 0x0B, 0xA5, 0x71},
	  15},
	 1},
	{{(u8 const[]){0xC7, 0xF6, 0x29, 0xB4, 0x03, 0xD0, 0xE9, 0xC0, 0x6A, 0x86, 0x39, 0xB2, 0x99, 0x46, 0x11},
	  (u8 const[]){0xC7, 0xF6, 0x29, 0xB4, 0x03, 0xD0, 0xE9, 0xC0, 0x6A, 0x86, 0x39, 0x61, 0xD4, 0x46, 0x11},
	  15},
	 1},
	{{(u8 const[]){0xD6, 0x0C, 0x57, 0x8D, 0x0B, 0xFD, 0x26, 0x2D, 0x2A, 0xE5, 0xBE, 0xA5, 0xBB, 0x2C, 0xE9},
	  (u8 const[]){0xD6, 0x0C, 0x57, 0x8D, 0x0B, 0xFD, 0x26, 0x2D, 0x2A, 0xE5, 0x99, 0xC8, 0xBB, 0x2C, 0xE9},
	  15},
	 1},
	{{(u8 const[]){0x7B, 0x50, 0x2E, 0x65, 0x17, 0xFF, 0x79, 0xD8, 0xA8, 0xF8, 0x27, 0x68, 0x27, 0x75, 0xA8},
	  (u8 const[]){0x7B, 0x50, 0x2E, 0x65, 0x17, 0xFF, 0x79, 0xD8, 0xA8, 0xD1, 0xED, 0x68, 0x27, 0x75, 0xA8},
	  15},
	 1},
	{{(u8 const[]){0xE0, 0x89, 0xF4, 0x61, 0xB3, 0x0C, 0x67, 0x81, 0x8A, 0x0E, 0xD0, 0x53, 0x94, 0x3A, 0x26},
	  (u8 const[]){0xE0, 0x89, 0xF4, 0x61, 0xB3, 0x0C, 0x67, 0x81, 0x35, 0x90, 0xD0, 0x53, 0x94, 0x3A, 0x26},
	  15},
	 1},
	{{(u8 const[]){0xA1, 0x5D, 0xFE, 0xF9, 0x1C, 0x52, 0xD1, 0xC9, 0xC8, 0x31, 0xB2, 0xB1, 0xFC, 0x47, 0xCF, 0xA4, 0x5C},
	  (u8 const[]){0xF4, 0xD6, 0x55, 0x3D, 0xDF, 0x4F, 0x78, 0x32, 0xF5, 0x63, 0x1B, 0x8C, 0x64, 0x62, 0xB1, 0xD1, 0xF1},
	  21},
	 -1},
	{{(u8 const[]){0xA6, 0x41, 0xEA, 0xC9, 0x6D, 0xA7, 0x5B, 0xD7, 0x1A, 0x00, 0x2E, 0x7F, 0x77, 0x04, 0xA6, 0x30, 0xC5,
				   0xF5, 0x8B, 0x6B, 0x58},
	  (u8 const[]){0xA6, 0x41, 0xEA, 0xC9, 0x6D, 0xA7, 0x5B, 0xD7, 0x1A, 0x00, 0x2E, 0x7F, 0x77, 0x04, 0xA6, 0x30, 0xC5,
				   0x8E, 0xF0, 0xE8, 0xDF},
	  21},
	 1},
	{{(u8 const[]){0xFD, 0xE4, 0xCA, 0xA0, 0x93, 0x48, 0x56, 0x59, 0x6F, 0xE0, 0x3A, 0x4D, 0x8E, 0xF7, 0x51, 0xD2, 0x26,
				   0x13, 0x61, 0xE9, 0xF9, 0x68, 0xA8, 0x35, 0x8A, 0x72, 0xC6, 0x44, 0x2F, 0x0F, 0x0A, 0xA6, 0x24, 0x81,
				   0x97, 0xFC, 0xDA, 0xFE, 0x87, 0x60, 0x91, 0x7C},
	  (u8 const[]){0xFD, 0xE4, 0xCA, 0xA0, 0x93, 0x48, 0x56, 0x59, 0x6F, 0xE0, 0x3A, 0x4D, 0x8E, 0xF7, 0x51, 0xD2, 0x26,
				   0x13, 0x61, 0xE9, 0xF9, 0x68, 0xA8, 0x35, 0x8A, 0x72, 0xC6, 0x44, 0x2F, 0x0F, 0x0A, 0xA6, 0x24, 0x81,
				   0x97, 0xFC, 0xDA, 0xFE, 0x87, 0x60, 0x91, 0x7C},
	  42},
	 0},
};
static constexpr usize TESTS_LEN = sizeof(TESTS) / sizeof(*TESTS);

/**
 * @brief Test the lib::memCmp function.
 *
 * @return `true` if the test was passed successfully, `false` otherwise.
 */
bool testMemCmp(void)
{
	for (usize i = 0; i < TESTS_LEN; ++i)
	{
		Parameters const &p = TESTS[i].parameters;

#pragma region cmp(s0, s1)
		{
			return_type const ret = lib::memCmp(p.s0, p.s1, p.n);

			switch (TESTS[i].expected)
			{
			case 0:
				if (ret != 0)
					return false;
				break;
			case 1:
				if (ret <= 0)
					return false;
				break;
			case -1:
				if (ret >= 0)
					return false;
				break;
			}
		}
#pragma endregion
#pragma region cmp(s1, s0)
		{
			return_type const ret = lib::memCmp(p.s1, p.s0, p.n);

			switch (TESTS[i].expected)
			{
			case 0:
				if (ret != 0)
					return false;
				break;
			case 1:
				if (ret >= 0)
					return false;
				break;
			case -1:
				if (ret <= 0)
					return false;
				break;
			}
		}
#pragma endregion
	}
	return true;
}
