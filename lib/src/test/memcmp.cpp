/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memcmp.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodufour <jodufour@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/12 11:00:02 by jodufour          #+#    #+#             */
/*   Updated: 2024/02/12 21:00:32 by jodufour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lib.h"

struct Parameters
{
	void const *const s0;
	void const *const s1;
	usize const n;
};

typedef i32 return_type;

struct Test
{
	Parameters const parameters;
	return_type const expected;
};

static constexpr Test TESTS[] = {
	{{(u8 const[]){},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8 const[]){0xDC, 0x6A, 0x0F},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8 const[]){0x9C, 0xC3, 0xA7},
	  (u8 const[]){0xFE, 0xE3, 0x59},
	  0},
	 0},
	{{(u8 const[]){0x73, 0xD3, 0xFA, 0x02},
	  (u8 const[]){0x73, 0xD3, 0xFA, 0x02},
	  4},
	 0},
	{{(u8 const[]){0xEB, 0x36, 0x81, 0x56},
	  (u8 const[]){0xC7, 0x96, 0x2C, 0x18},
	  4},
	 1},
	{{(u8 const[]){0xEE, 0x90, 0xA9, 0x13, 0x8C},
	  (u8 const[]){0xEE, 0x90, 0xA9, 0x13, 0x0A},
	  4},
	 0},
	{{(u8 const[]){0x7B, 0x43, 0xE9, 0x0E, 0x8E},
	  (u8 const[]){0xF0, 0xA5, 0x98, 0x1F, 0x1A},
	  5},
	 -1},
	{{(u8 const[]){0xA1, 0x5D, 0xFE, 0xF9, 0x1C, 0x52, 0xD1, 0xC9, 0xC8, 0x31, 0xB2, 0xB1, 0xFC, 0x47, 0xCF, 0xA4, 0x5C},
	  (u8 const[]){0xF4, 0xD6, 0x55, 0x3D, 0xDF, 0x4F, 0x78, 0x32, 0xF5, 0x63, 0x1B, 0x8C, 0x64, 0x62, 0xB1, 0xD1, 0xF1},
	  42},
	 -1},
	{{(u8 const[]){0xA6, 0x41, 0xEA, 0xC9, 0x6D, 0xA7, 0x5B, 0xD7, 0x1A, 0x00, 0x2E, 0x7F, 0x77, 0x04, 0xA6, 0x30, 0xC5,
				   0xF5, 0x8B, 0x6B, 0x58},
	  (u8 const[]){0xA6, 0x41, 0xEA, 0xC9, 0x6D, 0xA7, 0x5B, 0xD7, 0x1A, 0x00, 0x2E, 0x7F, 0x77, 0x04, 0xA6, 0x30, 0xC5,
				   0x8E, 0xF0, 0xE8, 0xDF},
	  21},
	 1},
	{{(u8 const[]){0xFD, 0xE4, 0xCA, 0xA0, 0x93, 0x48, 0x56, 0x59, 0x6F, 0xE0, 0x3A, 0x4D, 0x8E, 0xF7, 0x51, 0xD2, 0x26,
				   0x13, 0x61, 0xE9, 0xF9, 0x68, 0xA8, 0x35, 0x8A, 0x72, 0xC6, 0x44, 0x2F, 0x0F, 0x0A, 0xA6, 0x24, 0x81,
				   0x97, 0xFC, 0xDA, 0xFE, 0x87, 0x60, 0x91, 0x7C},
	  (u8 const[]){0xFD, 0xE4, 0xCA, 0xA0, 0x93, 0x48, 0x56, 0x59, 0x6F, 0xE0, 0x3A, 0x4D, 0x8E, 0xF7, 0x51, 0xD2, 0x26,
				   0x13, 0x61, 0xE9, 0xF9, 0x68, 0xA8, 0x35, 0x8A, 0x72, 0xC6, 0x44, 0x2F, 0x0F, 0x0A, 0xA6, 0x24, 0x81,
				   0x97, 0xFC, 0xDA, 0xFE, 0x87, 0x60, 0x91, 0x7C},
	  42},
	 0},
};
static constexpr usize TESTS_LEN = sizeof(TESTS) / sizeof(*TESTS);

/**
 * @brief Test the lib::memCmp function.
 *
 * @return true if the test was passed successfully, false otherwise.
 */
bool testMemCmp(void)
{
	for (usize i = 0; i < TESTS_LEN; ++i)
	{
		Parameters const p = TESTS[i].parameters;
		return_type const ret = lib::memCmp(p.s0, p.s1, p.n);

		switch (TESTS[i].expected)
		{
		case 0:
			if (ret != 0)
				return false;
			break;
		case 1:
			if (ret <= 0)
				return false;
			break;
		case -1:
			if (ret >= 0)
				return false;
			break;
		}
	}
	return true;
}
