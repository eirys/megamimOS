/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memmov.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodufour <jodufour@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/14 10:13:07 by jodufour          #+#    #+#             */
/*   Updated: 2024/02/15 00:01:20 by jodufour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lib.h"
#include <cstring>

struct Parameters
{
	u8 *const dst;
	u8 const *const src;
	usize const n;
};

typedef void *return_type;

struct Test
{
	Parameters const parameters;
	usize const dst_len;
};

static constexpr Test TESTS[] = {
	{{(u8[]){},
	  (u8 const[]){},
	  0},
	 0},
	{{(u8[]){
		  0x51},
	  (u8 const[]){},
	  0},
	 1},
	{{(u8[]){
		  0x76},
	  (u8 const[]){
		  0x77},
	  0},
	 1},
	{{(u8[]){
		  0x4C},
	  (u8 const[]){
		  0x04},
	  1},
	 1},
	{{(u8[]){
		  0x5E, 0xB0},
	  (u8 const[]){
		  0xF3, 0x8F},
	  2},
	 2},
	{{(u8[]){
		  0xAC, 0x10, 0x13},
	  (u8 const[]){
		  0x0A, 0x6A, 0x60},
	  3},
	 3},
	{{(u8[]){
		  0x02, 0x92, 0x59, 0x68},
	  (u8 const[]){
		  0x58, 0xBC, 0x91, 0x48},
	  4},
	 4},
	{{(u8[]){
		  0xCC, 0x33, 0xF0, 0x0E, 0xCA},
	  (u8 const[]){
		  0x01, 0xDC, 0x08, 0xE4, 0x6F},
	  5},
	 5},
	{{(u8[]){
		  0x5D, 0x80, 0xCF, 0xD8, 0xD8, 0xC9},
	  (u8 const[]){
		  0x60, 0x28, 0x1E, 0xA6, 0xEC, 0x02},
	  6},
	 6},
	{{(u8[]){
		  0x29, 0x91, 0xED, 0x39, 0xDA, 0x40, 0x22},
	  (u8 const[]){
		  0x5C, 0x67, 0xFD, 0xB9, 0xCB, 0x38, 0x57},
	  7},
	 7},
	{{(u8[]){
		  0x67, 0x71, 0xEC, 0xE3, 0x31, 0x7E, 0xE3, 0x68, 0x08, 0xE6, 0xBF, 0x22, 0x80, 0x77, 0xA6, 0x08, 0x59, 0x1C,
		  0x0B, 0x7D, 0xE0, 0xFD, 0x26, 0x0D},
	  (u8 const[]){
		  0x9B, 0x38, 0x62, 0x31, 0xA2, 0x25, 0xF3, 0x2E, 0xB7, 0x94, 0xF0, 0x9B, 0x56, 0xAE, 0x80, 0x7F, 0x58, 0x95,
		  0x7E, 0xA7, 0x65, 0xE9, 0x76, 0xF8},
	  24},
	 24},
	{{(u8[]){
		  0x6D, 0x85, 0x24, 0xC6, 0xC4, 0x69, 0xA2, 0xEF, 0x32, 0xCE, 0xD1, 0x76, 0x83, 0x68, 0x8F, 0x32, 0xD3, 0xC9,
		  0x29, 0x37, 0x46, 0xFF, 0xF1, 0x2D, 0x7B},
	  (u8 const[]){
		  0xE7, 0xC0, 0x07, 0x02, 0x35, 0xD2, 0xE5, 0xB0, 0xB6, 0xD1, 0xE8, 0xB9, 0x95, 0xEB, 0x0B, 0x91, 0x80, 0xAA,
		  0x55, 0x9E, 0xF9, 0x1E, 0x73, 0x66, 0x97},
	  25},
	 25},
	{{(u8[]){
		  0x1A, 0x15, 0x39, 0xF9, 0x65, 0x49, 0xD1, 0x06, 0x96, 0xED, 0x3A, 0xB8, 0xB9, 0x59, 0x0D, 0xBC, 0x0F, 0x5A,
		  0x3F, 0x33, 0x07, 0xB2, 0xB6, 0xA9, 0x80, 0x18},
	  (u8 const[]){
		  0x77, 0x17, 0xCC, 0x2B, 0x03, 0xCC, 0x05, 0xB4, 0xCC, 0xC6, 0x85, 0x18, 0x5D, 0xF1, 0xCB, 0xF6, 0xFA, 0x80,
		  0xD0, 0xE5, 0x27, 0xA0, 0xB7, 0x87, 0xFD, 0xC7},
	  26},
	 26},
	{{(u8[]){
		  0xBA, 0xD9, 0x57, 0xE5, 0x0B, 0x7D, 0xC4, 0xC7, 0x12, 0x21, 0x6D, 0xF0, 0x9F, 0x35, 0x82, 0x31, 0x31, 0x7B,
		  0x68, 0x9B, 0xC6, 0xF1, 0x52, 0xC2, 0x63, 0x6B, 0x8E},
	  (u8 const[]){
		  0x29, 0xCF, 0x11, 0xAD, 0x2E, 0x0F, 0x0A, 0x98, 0x48, 0x9F, 0x48, 0xE8, 0x6D, 0x88, 0x91, 0x5A, 0xEE, 0xD3,
		  0xCA, 0xA2, 0x99, 0xA3, 0x4F, 0x68, 0x3D, 0x21, 0x76},
	  27},
	 27},
	{{(u8[]){
		  0x66, 0x08, 0xA6, 0xD2, 0x12, 0x45, 0xD6, 0xDF, 0x9D, 0x3B, 0x32, 0xA8, 0x7F, 0x76, 0x19, 0x7A, 0x6A, 0x29,
		  0x79, 0x5A, 0xF6, 0xB1, 0x23, 0xE4, 0xC6, 0xDB, 0xEF, 0x8D},
	  (u8 const[]){
		  0x3A, 0x36, 0xBC, 0x5C, 0xA8, 0x8D, 0xD2, 0x97, 0x70, 0xDD, 0xE5, 0xF1, 0x31, 0xDC, 0xA1, 0x80, 0x55, 0xDA,
		  0xE7, 0xAD, 0x1B, 0xC0, 0x83, 0xA6, 0x27, 0xF8, 0x0E, 0xE5},
	  28},
	 28},
	{{(u8[]){
		  0xB9, 0xB9, 0x40, 0x58, 0xBC, 0x3F, 0x75, 0x0C, 0x97, 0x69, 0x70, 0x46, 0x24, 0xFB, 0x1C, 0x1E, 0xF0, 0x93,
		  0xBA, 0x33, 0x5D, 0xC5, 0x25, 0xA0, 0x11, 0x51, 0x95, 0x7A, 0x5E},
	  (u8 const[]){
		  0x06, 0x48, 0x62, 0x9C, 0x8B, 0xA3, 0x97, 0xDB, 0x6A, 0x99, 0x3B, 0xDB, 0xEA, 0x0B, 0xF7, 0x84, 0x38, 0x82,
		  0xCD, 0x7C, 0xE6, 0xD5, 0x95, 0x85, 0xFF, 0xFE, 0xDC, 0x5E, 0xB8},
	  29},
	 29},
	{{(u8[]){
		  0x24, 0x6D, 0x39, 0xB3, 0x59, 0x83, 0x6E, 0x62, 0x83, 0x8B, 0xCB, 0xEA, 0x9E, 0xC6, 0x72, 0xDC, 0xE3, 0x39,
		  0x64, 0x2A, 0x43, 0xE0, 0x6B, 0xE0, 0x45, 0x9B, 0x2A, 0x10, 0xD3, 0x73},
	  (u8 const[]){
		  0x09, 0xDA, 0xAD, 0x04, 0x05, 0x97, 0x9E, 0x35, 0x01, 0x61, 0x41, 0x76, 0xDA, 0x2B, 0x5A, 0xD8, 0xBC, 0x2A,
		  0x68, 0x0C, 0xE4, 0xCB, 0xD3, 0xFF, 0xE8, 0x70, 0xFE, 0x35, 0xC0, 0xF5},
	  30},
	 30},
	{{(u8[]){
		  0xD4, 0x01, 0xED, 0xDF, 0x18, 0xC4, 0x21, 0x68, 0x66, 0x26, 0x1D, 0xF0, 0x3B, 0x12, 0x22, 0xA1, 0xC3, 0x02,
		  0x32, 0xE7, 0xC7, 0x3F, 0xF4, 0x08, 0x5A, 0xD5, 0x4D, 0x4E, 0xE3, 0x5B, 0x15},
	  (u8 const[]){
		  0xCF, 0xEB, 0xC8, 0xE6, 0x14, 0x1F, 0x4D, 0x77, 0x64, 0x60, 0x27, 0xDD, 0x05, 0xD9, 0xE8, 0x8F, 0x81, 0xCF,
		  0x8E, 0x49, 0x4B, 0xB4, 0x0C, 0xD8, 0xDA, 0x61, 0x2D, 0x2C, 0xD6, 0x9D, 0x3A},
	  31},
	 31},
	{{(u8[]){
		  0x03, 0x1F, 0x2A, 0x0E, 0x32, 0x36, 0xB7, 0x7C, 0x66, 0x56, 0x69, 0x8A, 0x95, 0xD9, 0xFC, 0xC3, 0xF9, 0x02,
		  0xF2, 0x75, 0x9D, 0x1F, 0x4E, 0x71, 0x29, 0xE2, 0xB7, 0x31, 0x7E, 0xDC, 0x52, 0xA8, 0xEF, 0x96, 0xC7, 0x8C,
		  0x76, 0x29, 0x95, 0xD3, 0xBA, 0xA4},
	  (u8 const[]){
		  0xC0, 0x53, 0x9C, 0xAB, 0x1E, 0x52, 0x5D, 0x11, 0x39, 0xFC, 0x34, 0x94, 0x19, 0xD2, 0xCD, 0x09, 0x4E, 0x34,
		  0x7E, 0x8E, 0x14},
	  21},
	 42},
};
static constexpr usize TESTS_LEN = sizeof(TESTS) / sizeof(*TESTS);

struct OverlapTest
{
	u8 *const area;
	u8 const *const expected;
	usize const area_len;
	usize const dst_offset;
	usize const src_offset;
	usize const n;
};

static constexpr OverlapTest OVERLAP_TESTS[] = {
	{(u8[]){
		 0x46, 0xAE, 0x5B},
	 (u8 const[]){
		 0xAE, 0x5B, 0x5B},
	 3, 0, 1, 2},
	{(u8[]){
		 0x0E, 0x4D, 0x23},
	 (u8 const[]){
		 0x0E, 0x0E, 0x4D},
	 3, 1, 0, 2},
	{(u8[]){
		 0x25, 0x09, 0xF6, 0xE6},
	 (u8 const[]){
		 0x09, 0xF6, 0xE6, 0xE6},
	 4, 0, 1, 3},
	{(u8[]){
		 0xE4, 0xF3, 0x21, 0x0A},
	 (u8 const[]){
		 0xE4, 0xE4, 0xF3, 0x21},
	 4, 1, 0, 3},
	{(u8[]){
		 0xDB, 0x4B, 0xE9, 0x17, 0x9F},
	 (u8 const[]){
		 0x4B, 0xE9, 0x17, 0x9F, 0x9F},
	 5, 0, 1, 4},
	{(u8[]){
		 0x01, 0x56, 0xAB, 0xF8, 0x8A},
	 (u8 const[]){
		 0x01, 0x01, 0x56, 0xAB, 0xF8},
	 5, 1, 0, 4},
	{(u8[]){
		 0xE8, 0x61, 0x01, 0x06, 0xA3, 0x54},
	 (u8 const[]){
		 0x61, 0x01, 0x06, 0xA3, 0x54, 0x54},
	 6, 0, 1, 5},
	{(u8[]){
		 0x25, 0x5C, 0xBE, 0x72, 0x2C, 0xBE},
	 (u8 const[]){
		 0x25, 0x25, 0x5C, 0xBE, 0x72, 0x2C},
	 6, 1, 0, 5},
	{(u8[]){
		 0xBD, 0x89, 0xE5, 0x08, 0x89, 0xA0, 0xCD},
	 (u8 const[]){
		 0x89, 0xE5, 0x08, 0x89, 0xA0, 0xCD, 0xCD},
	 7, 0, 1, 6},
	{(u8[]){
		 0x7F, 0xD8, 0xBC, 0x41, 0xCB, 0x65, 0x42},
	 (u8 const[]){
		 0x7F, 0x7F, 0xD8, 0xBC, 0x41, 0xCB, 0x65},
	 7, 1, 0, 6},
	{(u8[]){
		 0x64, 0x16, 0x23, 0x70, 0xC2, 0x89, 0xFE, 0x38},
	 (u8 const[]){
		 0x16, 0x23, 0x70, 0xC2, 0x89, 0xFE, 0x38, 0x38},
	 8, 0, 1, 7},
	{(u8[]){
		 0x3E, 0xF8, 0xDD, 0xB0, 0x82, 0xBE, 0xE6, 0x36},
	 (u8 const[]){
		 0x3E, 0x3E, 0xF8, 0xDD, 0xB0, 0x82, 0xBE, 0xE6},
	 8, 1, 0, 7},
	{(u8[]){
		 0x2E, 0xCD, 0x61, 0x2A, 0x8E, 0xA0, 0x54, 0x14, 0x08, 0x48, 0xCD, 0x33, 0x75, 0xAE, 0xD0, 0x09, 0x06},
	 (u8 const[]){
		 0xCD, 0x61, 0x2A, 0x8E, 0xA0, 0x54, 0x14, 0x08, 0x48, 0xCD, 0x33, 0x75, 0xAE, 0xD0, 0x09, 0x06, 0x06},
	 17, 0, 1, 16},
	{(u8[]){
		 0xCB, 0xA6, 0x19, 0x32, 0xF4, 0x92, 0xA1, 0x5A, 0xE6, 0xAB, 0x90, 0xCE, 0x59, 0x8E, 0x8D, 0xCF, 0x9C},
	 (u8 const[]){
		 0xCB, 0xCB, 0xA6, 0x19, 0x32, 0xF4, 0x92, 0xA1, 0x5A, 0xE6, 0xAB, 0x90, 0xCE, 0x59, 0x8E, 0x8D, 0xCF},
	 17, 1, 0, 16},
	{(u8[]){
		 0x18, 0x55, 0xBB, 0xE1, 0x04, 0xEB, 0x6C, 0x69, 0xC6, 0x25, 0xAC, 0xA2, 0x92, 0x34, 0xDD, 0x56, 0x0D, 0xF9},
	 (u8 const[]){
		 0x55, 0xBB, 0xE1, 0x04, 0xEB, 0x6C, 0x69, 0xC6, 0x25, 0xAC, 0xA2, 0x92, 0x34, 0xDD, 0x56, 0x0D, 0xF9, 0xF9},
	 18, 0, 1, 17},
	{(u8[]){
		 0x61, 0xD9, 0xC1, 0x0D, 0xAD, 0xC0, 0x8F, 0x12, 0x1D, 0xBC, 0xF3, 0xC3, 0x8C, 0x3D, 0xC2, 0x58, 0xFC, 0xF8},
	 (u8 const[]){
		 0x61, 0x61, 0xD9, 0xC1, 0x0D, 0xAD, 0xC0, 0x8F, 0x12, 0x1D, 0xBC, 0xF3, 0xC3, 0x8C, 0x3D, 0xC2, 0x58, 0xFC},
	 18, 1, 0, 17},
	{(u8[]){
		 0x90, 0xB1, 0xCE, 0x4E, 0x64, 0x73, 0xCD, 0x2C, 0xF9, 0x03, 0x0E, 0xEA, 0x5C, 0x9A, 0xDA, 0x1A, 0xA0, 0x71,
		 0xD9},
	 (u8 const[]){
		 0xB1, 0xCE, 0x4E, 0x64, 0x73, 0xCD, 0x2C, 0xF9, 0x03, 0x0E, 0xEA, 0x5C, 0x9A, 0xDA, 0x1A, 0xA0, 0x71, 0xD9,
		 0xD9},
	 19, 0, 1, 18},
	{(u8[]){
		 0x80, 0xA9, 0x43, 0x09, 0x17, 0xB0, 0xD9, 0x70, 0x89, 0x3A, 0xD3, 0x75, 0x78, 0x40, 0xEA, 0x28, 0xC0, 0x52,
		 0xE7},
	 (u8 const[]){
		 0x80, 0x80, 0xA9, 0x43, 0x09, 0x17, 0xB0, 0xD9, 0x70, 0x89, 0x3A, 0xD3, 0x75, 0x78, 0x40, 0xEA, 0x28, 0xC0,
		 0x52},
	 19, 1, 0, 18},
	{(u8[]){
		 0x93, 0xD7, 0x6A, 0x1F, 0xA5, 0xBD, 0xDE, 0x4C, 0x36, 0xB4, 0x3F, 0x49, 0x1D, 0x9E, 0x5D, 0xAD, 0x02, 0x19,
		 0xC8, 0x5F},
	 (u8 const[]){
		 0xD7, 0x6A, 0x1F, 0xA5, 0xBD, 0xDE, 0x4C, 0x36, 0xB4, 0x3F, 0x49, 0x1D, 0x9E, 0x5D, 0xAD, 0x02, 0x19, 0xC8,
		 0x5F, 0x5F},
	 20, 0, 1, 19},
	{(u8[]){
		 0xAC, 0xE9, 0xA5, 0x81, 0xDD, 0x51, 0x63, 0x74, 0x0D, 0xF9, 0x93, 0xC1, 0x6B, 0xD2, 0xBA, 0x7C, 0xB2, 0xBD,
		 0xDD, 0xF2},
	 (u8 const[]){
		 0xAC, 0xAC, 0xE9, 0xA5, 0x81, 0xDD, 0x51, 0x63, 0x74, 0x0D, 0xF9, 0x93, 0xC1, 0x6B, 0xD2, 0xBA, 0x7C, 0xB2,
		 0xBD, 0xDD},
	 20, 1, 0, 19},
	{(u8[]){
		 0xCD, 0x68, 0x40, 0xFA, 0xAF, 0x9D, 0xCF, 0xBA, 0x50, 0x1D, 0x2E, 0x57, 0x9F, 0x21, 0x63, 0xA1, 0xD9, 0xFD,
		 0xFF, 0x77, 0x95},
	 (u8 const[]){
		 0x68, 0x40, 0xFA, 0xAF, 0x9D, 0xCF, 0xBA, 0x50, 0x1D, 0x2E, 0x57, 0x9F, 0x21, 0x63, 0xA1, 0xD9, 0xFD, 0xFF,
		 0x77, 0x95, 0x95},
	 21, 0, 1, 20},
	{(u8[]){
		 0x52, 0x23, 0x9B, 0x46, 0x01, 0x88, 0xFC, 0xE5, 0x41, 0x61, 0x75, 0xE1, 0x6B, 0xCD, 0x41, 0xB7, 0x6D, 0xE6,
		 0xFF, 0xC7, 0xEB},
	 (u8 const[]){
		 0x52, 0x52, 0x23, 0x9B, 0x46, 0x01, 0x88, 0xFC, 0xE5, 0x41, 0x61, 0x75, 0xE1, 0x6B, 0xCD, 0x41, 0xB7, 0x6D,
		 0xE6, 0xFF, 0xC7},
	 21, 1, 0, 20},
	{(u8[]){
		 0x6E, 0x9D, 0x25, 0x3C, 0x8A, 0xC0, 0x1F, 0x43, 0x6D, 0x5F, 0xC7, 0xF2, 0x27, 0xE3, 0xB2, 0x60, 0x2F, 0x39,
		 0x19, 0x5D, 0x72, 0x03},
	 (u8 const[]){
		 0x9D, 0x25, 0x3C, 0x8A, 0xC0, 0x1F, 0x43, 0x6D, 0x5F, 0xC7, 0xF2, 0x27, 0xE3, 0xB2, 0x60, 0x2F, 0x39, 0x19,
		 0x5D, 0x72, 0x03, 0x03},
	 22, 0, 1, 21},
	{(u8[]){
		 0x15, 0xCD, 0xFE, 0x2B, 0xF7, 0x36, 0x69, 0xB1, 0x26, 0x23, 0x54, 0xED, 0xF5, 0x6D, 0xF9, 0xE8, 0x6B, 0x52,
		 0xD9, 0xC6, 0x7D, 0xB5},
	 (u8 const[]){
		 0x15, 0x15, 0xCD, 0xFE, 0x2B, 0xF7, 0x36, 0x69, 0xB1, 0x26, 0x23, 0x54, 0xED, 0xF5, 0x6D, 0xF9, 0xE8, 0x6B,
		 0x52, 0xD9, 0xC6, 0x7D},
	 22, 1, 0, 21},
	{(u8[]){
		 0xB2, 0xB6, 0x4E, 0x9C, 0x2A, 0x58, 0x75, 0x4B, 0xC9, 0xD2, 0xC9, 0x62, 0xF6, 0x10, 0x38, 0x7B, 0x5B, 0xD9,
		 0x90, 0x63, 0xDB, 0xFF, 0x5A},
	 (u8 const[]){
		 0xB6, 0x4E, 0x9C, 0x2A, 0x58, 0x75, 0x4B, 0xC9, 0xD2, 0xC9, 0x62, 0xF6, 0x10, 0x38, 0x7B, 0x5B, 0xD9, 0x90,
		 0x63, 0xDB, 0xFF, 0x5A, 0x5A},
	 23, 0, 1, 22},
	{(u8[]){
		 0x45, 0xE2, 0x10, 0x83, 0xCB, 0x26, 0xAC, 0x67, 0xFB, 0x8B, 0x9A, 0x91, 0x44, 0x13, 0x06, 0xC1, 0x32, 0x19,
		 0x1B, 0xF7, 0x02, 0x1E, 0xA1},
	 (u8 const[]){
		 0x45, 0x45, 0xE2, 0x10, 0x83, 0xCB, 0x26, 0xAC, 0x67, 0xFB, 0x8B, 0x9A, 0x91, 0x44, 0x13, 0x06, 0xC1, 0x32,
		 0x19, 0x1B, 0xF7, 0x02, 0x1E},
	 23, 1, 0, 22},
	{(u8[]){
		 0x56, 0x7C, 0x07, 0xF8, 0x2C, 0x1A, 0x5A, 0xFE, 0xCF, 0x55, 0x87, 0xCA, 0x4A, 0xA0, 0x91, 0xA2, 0x75, 0x5F,
		 0x1D, 0x83, 0x16, 0xA7, 0xEF, 0x8E},
	 (u8 const[]){
		 0x7C, 0x07, 0xF8, 0x2C, 0x1A, 0x5A, 0xFE, 0xCF, 0x55, 0x87, 0xCA, 0x4A, 0xA0, 0x91, 0xA2, 0x75, 0x5F, 0x1D,
		 0x83, 0x16, 0xA7, 0xEF, 0x8E, 0x8E},
	 24, 0, 1, 23},
	{(u8[]){
		 0xDC, 0x6C, 0x97, 0xBA, 0xD8, 0x88, 0xC2, 0xCA, 0x79, 0xFC, 0xBC, 0xBC, 0xEA, 0x9D, 0xB6, 0x7E, 0x36, 0x50,
		 0xAF, 0x19, 0x41, 0xBC, 0x3C, 0x0E},
	 (u8 const[]){
		 0xDC, 0xDC, 0x6C, 0x97, 0xBA, 0xD8, 0x88, 0xC2, 0xCA, 0x79, 0xFC, 0xBC, 0xBC, 0xEA, 0x9D, 0xB6, 0x7E, 0x36,
		 0x50, 0xAF, 0x19, 0x41, 0xBC, 0x3C},
	 24, 1, 0, 23},
};
static constexpr usize OVERLAP_TESTS_LEN = sizeof(OVERLAP_TESTS) / sizeof(*OVERLAP_TESTS);

/**
 * @brief Tests the lib::memMov function.
 *
 * @return `true` if the test was passed successfully, `false` otherwise.
 */
bool testMemMov(void)
{
	for (usize i = 0; i < TESTS_LEN; ++i)
	{
		Parameters const &p = TESTS[i].parameters;
		usize const end_len = TESTS[i].dst_len - p.n;
		u8 const *const end = p.dst + p.n;
		u8 const *const end_dup = reinterpret_cast<u8 const *>(memcpy(new u8[end_len], end, end_len));
		return_type const ret = lib::memMov(p.dst, p.src, p.n);
		bool const failed = ret != p.dst || memcmp(ret, p.src, p.n) || memcmp(end, end_dup, end_len);

		delete[] end_dup;
		if (failed)
			return false;
	}
	(void)OVERLAP_TESTS_LEN;
	for (usize i = 0; i < OVERLAP_TESTS_LEN; ++i)
	{
		u8 *const dst = OVERLAP_TESTS[i].area + OVERLAP_TESTS[i].dst_offset;
		u8 const *const src = OVERLAP_TESTS[i].area + OVERLAP_TESTS[i].src_offset;
		return_type const ret = lib::memMov(dst, src, OVERLAP_TESTS[i].n);

		if (ret != dst || memcmp(OVERLAP_TESTS[i].area, OVERLAP_TESTS[i].expected, OVERLAP_TESTS[i].area_len))
			return false;
	}
	return true;
}
