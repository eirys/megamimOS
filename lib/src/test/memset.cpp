/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   memset.cpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: jodufour <jodufour@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/13 07:46:03 by jodufour          #+#    #+#             */
/*   Updated: 2024/02/14 09:29:24 by jodufour         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "lib.h"
#include <cstring>

struct Parameters
{
	u8 *const s;
	u8 const c;
	usize const n;
};

typedef void *return_type;

struct Test
{
	Parameters const parameters;
	u8 const *const expected;
	usize const s_len;
};

static constexpr Test TESTS[] = {
	{{(u8[]){}, 0x00, 0},
	 (u8 const[0]){},
	 0},
	{{(u8[]){0x34}, 0x4B, 0},
	 (u8 const[0]){},
	 1},
	{{(u8[]){0xEF}, 0x0E, 1},
	 (u8 const[1]){0x0E},
	 1},
	{{(u8[]){0x97, 0x1C}, 0xEA, 2},
	 (u8 const[2]){0xEA, 0xEA},
	 2},
	{{(u8[]){0xEB, 0x07, 0x68}, 0x9D, 3},
	 (u8 const[3]){0x9D, 0x9D, 0x9D},
	 3},
	{{(u8[]){0x5B, 0xA6, 0x80, 0x0C}, 0xAF, 4},
	 (u8 const[4]){0xAF, 0xAF, 0xAF, 0xAF},
	 4},
	{{(u8[]){0x20, 0x7D, 0x04, 0x8E, 0x01}, 0xD3, 5},
	 (u8 const[5]){0xD3, 0xD3, 0xD3, 0xD3, 0xD3},
	 5},
	{{(u8[]){0x51, 0xBC, 0xD8, 0x1C, 0xC0, 0x2A}, 0xF4, 6},
	 (u8 const[6]){0xF4, 0xF4, 0xF4, 0xF4, 0xF4, 0xF4},
	 6},
	{{(u8[]){0x11, 0xEB, 0xE8, 0x8C, 0x6D, 0x94, 0x69}, 0x8B, 7},
	 (u8 const[7]){0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B, 0x8B},
	 7},
	{{(u8[]){0xE2, 0x1D, 0x91, 0x54, 0xE2, 0x95, 0x68, 0x0D}, 0x25, 8},
	 (u8 const[8]){0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25},
	 8},
	{{(u8[]){0x4D, 0x57, 0xC6, 0x00, 0x62, 0xC6, 0xDA, 0xA8, 0x60, 0x8F, 0xFC, 0xAD, 0x9D, 0x71, 0x2C, 0x54, 0x6D, 0x27,
			 0x9A, 0x00, 0xA7, 0xBC, 0x37, 0x3A, 0xA6, 0x48, 0x1B, 0x7D, 0x6E, 0x3B, 0xD6, 0x1F},
	  0x4C, 32},
	 (u8 const[32]){0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C,
					0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C, 0x4C},
	 32},
	{{(u8[]){0xC1, 0x7A, 0x62, 0x80, 0x23, 0xDF, 0x66, 0x3A, 0xEE, 0x18, 0xCF, 0x0B, 0x37, 0x66, 0x2F, 0x30, 0x3B, 0x67,
			 0x1B, 0xCB, 0xA3, 0x7C, 0xD8, 0xB4, 0x3B, 0x39, 0x4D, 0x3E, 0x61, 0xD5, 0x3B, 0xE7, 0xF2},
	  0x2C, 33},
	 (u8 const[33]){0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C,
					0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C, 0x2C,
					0x2C},
	 33},
	{{(u8[]){0xAF, 0x53, 0xF1, 0x05, 0x28, 0x77, 0x3F, 0x02, 0xD8, 0x65, 0xEE, 0x4C, 0xAE, 0x98, 0x3A, 0x39, 0xCC, 0xDC,
			 0x49, 0x8D, 0x1E, 0x13, 0xF2, 0xA8, 0x95, 0xCB, 0x99, 0x3C, 0xC8, 0xB0, 0x2D, 0xF5, 0x34, 0xDD},
	  0x7C, 34},
	 (u8 const[34]){0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C,
					0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C,
					0x7C, 0x7C},
	 34},
	{{(u8[]){0x1F, 0x44, 0x76, 0x07, 0x36, 0xFE, 0x89, 0x4E, 0x81, 0x47, 0x3E, 0xEF, 0xEF, 0x43, 0xA1, 0x01, 0xF0, 0x05,
			 0xCE, 0x8E, 0xE6, 0xDB, 0xDF, 0xC7, 0x3B, 0x15, 0x61, 0xFF, 0x05, 0x5B, 0x04, 0x5A, 0x32, 0xD0, 0xDE},
	  0x8C, 35},
	 (u8 const[35]){0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C,
					0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C,
					0x8C, 0x8C, 0x8C},
	 35},
	{{(u8[]){0xE4, 0xCF, 0x75, 0xC7, 0x3A, 0xA7, 0x10, 0x6C, 0x13, 0x97, 0xF0, 0x23, 0x72, 0x0D, 0x7E, 0x7F, 0x42, 0xAE,
			 0x45, 0xA0, 0x5C, 0x86, 0xB2, 0xF0, 0xF7, 0xEF, 0xB9, 0x41, 0x3C, 0x98, 0x7C, 0x05, 0x97, 0x19, 0x4C, 0xFD},
	  0x25, 36},
	 (u8 const[36]){0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25,
					0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25, 0x25,
					0x25, 0x25, 0x25, 0x25},
	 36},
	{{(u8[]){0x33, 0xB6, 0xA0, 0x20, 0x84, 0x0F, 0x68, 0xDC, 0x96, 0x0B, 0xE7, 0x2B, 0x08, 0xFE, 0xEC, 0x4C, 0x40, 0x73,
			 0x2C, 0x24, 0x5F, 0xEA, 0xF7, 0x40, 0xFA, 0x50, 0x98, 0x35, 0x2F, 0xA5, 0x3E, 0xF8, 0xB8, 0xAF, 0xFD, 0x1B,
			 0x6B},
	  0x95, 37},
	 (u8 const[37]){0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
					0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95, 0x95,
					0x95, 0x95, 0x95, 0x95, 0x95},
	 37},
	{{(u8[]){0xF3, 0x64, 0x61, 0xA0, 0x54, 0x0B, 0x5B, 0x56, 0x47, 0x3B, 0xFD, 0x47, 0xF3, 0x67, 0xF3, 0x68, 0x6A, 0x58,
			 0x9D, 0x67, 0xDA, 0x0C, 0x22, 0x88, 0x97, 0x4F, 0x57, 0x1A, 0x5A, 0x35, 0x78, 0x51, 0x01, 0x60, 0x40, 0x9E,
			 0x8F, 0x14},
	  0x40, 38},
	 (u8 const[38]){0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
					0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
					0x40, 0x40, 0x40, 0x40, 0x40, 0x40},
	 38},
	{{(u8[]){0x6E, 0xC6, 0x38, 0xE8, 0x8C, 0xCB, 0xE8, 0x8B, 0xBD, 0x75, 0xD8, 0x01, 0x40, 0x5D, 0x66, 0x10, 0x5F, 0x21,
			 0xF9, 0xD1, 0x34, 0x5F, 0x6C, 0xD6, 0x9A, 0xF3, 0x0D, 0x1D, 0x2E, 0xA0, 0x65, 0x32, 0x7A, 0x61, 0x67, 0xCC,
			 0xC3, 0xA8, 0x00},
	  0xDC, 39},
	 (u8 const[39]){0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
					0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC,
					0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC, 0xDC},
	 39},
	{{(u8[]){0x59, 0x8D, 0xE1, 0x06, 0xE9, 0xB6, 0x85, 0x58, 0x60, 0xA0, 0x83, 0x9F, 0xC4, 0x77, 0xE0, 0x40, 0x44, 0xFE,
			 0xA7, 0x0D, 0xA5, 0xB2, 0xF7, 0xB5, 0xBF, 0x89, 0x01, 0x8C, 0xF2, 0x9B, 0xD4, 0x30, 0x2A, 0x4A, 0xE5, 0x2C,
			 0x02, 0x33, 0x66, 0xB1, 0xA6, 0x6F},
	  0x80, 21},
	 (u8 const[21]){0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
					0x80, 0x80, 0x80, 0x80, 0x80},
	 42},
};
static constexpr usize TESTS_LEN = sizeof(TESTS) / sizeof(Test);

/**
 * @brief Tests the lib::memSet function.
 *
 * @return `true` if the test was passed successfully, `false` otherwise.
 */
bool testMemSet(void)
{
	for (usize i = 0; i < TESTS_LEN; ++i)
	{
		Parameters const &p = TESTS[i].parameters;
		usize const end_len = TESTS[i].s_len - p.n;
		u8 const *const end = p.s + p.n;
		u8 const *const end_dup = reinterpret_cast<u8 const *>(memcpy(new u8[end_len], end, end_len));
		return_type const ret = lib::memSet(p.s, p.c, p.n);
		bool const failed = ret != p.s || memcmp(ret, TESTS[i].expected, p.n) || memcmp(end, end_dup, end_len);

		delete[] end_dup;
		if (failed)
			return false;
	}
	return true;
}
